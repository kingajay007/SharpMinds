//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharpMinds.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/SharpMinds.Service.Category")]
    [System.SerializableAttribute()]
    public partial class Tag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TagIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagId {
            get {
                return this.TagIdField;
            }
            set {
                if ((this.TagIdField.Equals(value) != true)) {
                    this.TagIdField = value;
                    this.RaisePropertyChanged("TagId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Question", Namespace="http://schemas.datacontract.org/2004/07/SharpMinds.Service.Category")]
    [System.SerializableAttribute()]
    public partial class Question : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SharpMinds.ServiceReference1.Option[] OptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuestionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TagIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SharpMinds.ServiceReference1.Option[] Options {
            get {
                return this.OptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionsField, value) != true)) {
                    this.OptionsField = value;
                    this.RaisePropertyChanged("Options");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Query {
            get {
                return this.QueryField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryField, value) != true)) {
                    this.QueryField = value;
                    this.RaisePropertyChanged("Query");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionId {
            get {
                return this.QuestionIdField;
            }
            set {
                if ((this.QuestionIdField.Equals(value) != true)) {
                    this.QuestionIdField = value;
                    this.RaisePropertyChanged("QuestionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TagId {
            get {
                return this.TagIdField;
            }
            set {
                if ((this.TagIdField.Equals(value) != true)) {
                    this.TagIdField = value;
                    this.RaisePropertyChanged("TagId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Option", Namespace="http://schemas.datacontract.org/2004/07/SharpMinds.Service.Category")]
    [System.SerializableAttribute()]
    public partial class Option : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCorrectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OptionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OptionValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCorrect {
            get {
                return this.IsCorrectField;
            }
            set {
                if ((this.IsCorrectField.Equals(value) != true)) {
                    this.IsCorrectField = value;
                    this.RaisePropertyChanged("IsCorrect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OptionId {
            get {
                return this.OptionIdField;
            }
            set {
                if ((this.OptionIdField.Equals(value) != true)) {
                    this.OptionIdField = value;
                    this.RaisePropertyChanged("OptionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OptionValue {
            get {
                return this.OptionValueField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionValueField, value) != true)) {
                    this.OptionValueField = value;
                    this.RaisePropertyChanged("OptionValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/SharpMinds.Service.Category")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SharpMinds.ServiceReference1.Tag[] TagsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SharpMinds.ServiceReference1.Tag[] Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ISharpMindsService")]
    public interface ISharpMindsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetCategories", ReplyAction="http://tempuri.org/ISharpMindsService/GetCategoriesResponse")]
        SharpMinds.ServiceReference1.Tag[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetCategories", ReplyAction="http://tempuri.org/ISharpMindsService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Tag[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetTagsByCategory", ReplyAction="http://tempuri.org/ISharpMindsService/GetTagsByCategoryResponse")]
        SharpMinds.ServiceReference1.Tag[] GetTagsByCategory(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetTagsByCategory", ReplyAction="http://tempuri.org/ISharpMindsService/GetTagsByCategoryResponse")]
        System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Tag[]> GetTagsByCategoryAsync(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetQuestionsWithTagId", ReplyAction="http://tempuri.org/ISharpMindsService/GetQuestionsWithTagIdResponse")]
        SharpMinds.ServiceReference1.Question[] GetQuestionsWithTagId(int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetQuestionsWithTagId", ReplyAction="http://tempuri.org/ISharpMindsService/GetQuestionsWithTagIdResponse")]
        System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Question[]> GetQuestionsWithTagIdAsync(int TagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetRandomQuestion", ReplyAction="http://tempuri.org/ISharpMindsService/GetRandomQuestionResponse")]
        SharpMinds.ServiceReference1.Question GetRandomQuestion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetRandomQuestion", ReplyAction="http://tempuri.org/ISharpMindsService/GetRandomQuestionResponse")]
        System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Question> GetRandomQuestionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetCategoryById", ReplyAction="http://tempuri.org/ISharpMindsService/GetCategoryByIdResponse")]
        SharpMinds.ServiceReference1.Category GetCategoryById(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetCategoryById", ReplyAction="http://tempuri.org/ISharpMindsService/GetCategoryByIdResponse")]
        System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Category> GetCategoryByIdAsync(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetTagById", ReplyAction="http://tempuri.org/ISharpMindsService/GetTagByIdResponse")]
        SharpMinds.ServiceReference1.Tag GetTagById(int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetTagById", ReplyAction="http://tempuri.org/ISharpMindsService/GetTagByIdResponse")]
        System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Tag> GetTagByIdAsync(int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetQuestionsByCategory", ReplyAction="http://tempuri.org/ISharpMindsService/GetQuestionsByCategoryResponse")]
        SharpMinds.ServiceReference1.Question[] GetQuestionsByCategory(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetQuestionsByCategory", ReplyAction="http://tempuri.org/ISharpMindsService/GetQuestionsByCategoryResponse")]
        System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Question[]> GetQuestionsByCategoryAsync(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetCategoryWithTags", ReplyAction="http://tempuri.org/ISharpMindsService/GetCategoryWithTagsResponse")]
        SharpMinds.ServiceReference1.Category[] GetCategoryWithTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISharpMindsService/GetCategoryWithTags", ReplyAction="http://tempuri.org/ISharpMindsService/GetCategoryWithTagsResponse")]
        System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Category[]> GetCategoryWithTagsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISharpMindsServiceChannel : SharpMinds.ServiceReference1.ISharpMindsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SharpMindsServiceClient : System.ServiceModel.ClientBase<SharpMinds.ServiceReference1.ISharpMindsService>, SharpMinds.ServiceReference1.ISharpMindsService {
        
        public SharpMindsServiceClient() {
        }
        
        public SharpMindsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SharpMindsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SharpMindsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SharpMindsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SharpMinds.ServiceReference1.Tag[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Tag[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public SharpMinds.ServiceReference1.Tag[] GetTagsByCategory(int categoryId) {
            return base.Channel.GetTagsByCategory(categoryId);
        }
        
        public System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Tag[]> GetTagsByCategoryAsync(int categoryId) {
            return base.Channel.GetTagsByCategoryAsync(categoryId);
        }
        
        public SharpMinds.ServiceReference1.Question[] GetQuestionsWithTagId(int TagId) {
            return base.Channel.GetQuestionsWithTagId(TagId);
        }
        
        public System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Question[]> GetQuestionsWithTagIdAsync(int TagId) {
            return base.Channel.GetQuestionsWithTagIdAsync(TagId);
        }
        
        public SharpMinds.ServiceReference1.Question GetRandomQuestion() {
            return base.Channel.GetRandomQuestion();
        }
        
        public System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Question> GetRandomQuestionAsync() {
            return base.Channel.GetRandomQuestionAsync();
        }
        
        public SharpMinds.ServiceReference1.Category GetCategoryById(int categoryId) {
            return base.Channel.GetCategoryById(categoryId);
        }
        
        public System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Category> GetCategoryByIdAsync(int categoryId) {
            return base.Channel.GetCategoryByIdAsync(categoryId);
        }
        
        public SharpMinds.ServiceReference1.Tag GetTagById(int tagId) {
            return base.Channel.GetTagById(tagId);
        }
        
        public System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Tag> GetTagByIdAsync(int tagId) {
            return base.Channel.GetTagByIdAsync(tagId);
        }
        
        public SharpMinds.ServiceReference1.Question[] GetQuestionsByCategory(int categoryId) {
            return base.Channel.GetQuestionsByCategory(categoryId);
        }
        
        public System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Question[]> GetQuestionsByCategoryAsync(int categoryId) {
            return base.Channel.GetQuestionsByCategoryAsync(categoryId);
        }
        
        public SharpMinds.ServiceReference1.Category[] GetCategoryWithTags() {
            return base.Channel.GetCategoryWithTags();
        }
        
        public System.Threading.Tasks.Task<SharpMinds.ServiceReference1.Category[]> GetCategoryWithTagsAsync() {
            return base.Channel.GetCategoryWithTagsAsync();
        }
    }
}
